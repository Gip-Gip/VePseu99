*##############################################################################*
* ldmap.a99 - code used to decompress map data into ram                        *
*==============================================================================*
* This file is a part of VePseu 99!                                            *
*                                                                              *
* Copyright (c) 2020, Charles Thompson. All rights reserved.                   *
*                                                                              *
* Redistribution and use in source and binary forms, with or without           *
* modification, are permitted provided that the following conditions are met:  *
*                                                                              *
* 1. Redistributions of source code must retain the above copyright notice,    *
*    this list of conditions and the following disclaimer.                     *
* 2. Redistributions in binary form must reproduce the above copyright notice, *
*    this list of conditions and the following disclaimer in the documentation *
*    and/or other materials provided with the distribution.                    *
* 3. Neither the name of the copyright holder nor the names of its             *
*    contributors may be used to endorse or promote products derived from this *
*    software without specific prior written permission.                       *
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  *
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    *
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   *
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    *
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          *
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         *
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     *
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      *
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      *
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   *
* POSSIBILITY OF SUCH DAMAGE.                                                  *
*##############################################################################*

* LDMAP - Decompresses a map into memory, and sets the MAP pointer to that map!
* MAP = pointer to compressed map data
* 10804 cycles in total
LDMAP
    CLR PX * 10 cycles
    CLR PY * 10 cycles
    CLR PA * 10 cycles
    CLR A1 * 10 cycles
    MOVB *MAP+, PX * 20 cycles
    SWPB PX * 10 cycles
    MOVB *MAP+, PY * 20 cycles
    SWPB PY * 10 cycles
    MOVB *MAP+, PA * 20 cycles
    SWPB PA * 10 cycles
* A1 will hold the size of the LZ dictionary
    MOVB *MAP+, A1 * 20 cycles
    SWPB A1 * 10 cycles
* A2 will be the pointer to the LZ dictionary
    LI A2, LZDICT * 12 cycles

* Load the dictionary!
* We move 2 bytes at a time to make things faster. Consequentially, the map
* has to be at an even address for this to work...
* 80 cycles per loop, and given most dictionaries should be around 16 entries,
* this will take (1280 - 2) cycles, typically
LDML1
    MOV *MAP+, *A2+ * 30 cycles
    MOV *MAP+, *A2+ * 30 cycles
    DEC A1 * 10 cycles
    JNE LDML1 * 8 or 10 cycles

* A2 will be the pointer to the decompressed map
    LI A2, RAMMAP * 12 cycles
* A3 will be the length of the compressed data (always 64)
    LI A3, 64

* Load the map!
* 146 cycles per loop, and since this loops 64 times, this will take up 9344 - 2
* cycles in total!
LDML2
    CLR A1 * 10 cycles
    MOVB *MAP+, A1 * 20 cycles
    SWPB A1 * 10 cycles
    SLA A1, 2 * 16 cycles
    AI A1, LZDICT * 14 cycles
    MOV *A1+, *A2+ * 30 cycles
    MOV *A1, *A2+ * 26 cycles
    DEC A3 * 10 cycles
    JNE LDML2 * 8 or 10 cycles

* Set MAP to the location of the RAMMAP and we're done
    LI MAP, RAMMAP * 12 cycles

    RT

