;##############################################################################;
; main.a99 - code that initializes the ti and establishes a game loop          ;
;==============================================================================;
; This file is a part of VePseu 99!                                             ;
;                                                                              ;
; Copyright (c) 2020, Charles Thompson. All rights reserved.                   ;
;                                                                              ;
; Redistribution and use in source and binary forms, with or without           ;
; modification, are permitted provided that the following conditions are met:   ;
;                                                                              ;
; 1. Redistributions of source code must retain the above copyright notice,    ;
;    this list of conditions and the following disclaimer.                     ;
; 2. Redistributions in binary form must reproduce the above copyright notice, ;
;    this list of conditions and the following disclaimer in the documentation ;
;    and/or other materials provided with the distribution.                    ;
; 3. Neither the name of the copyright holder nor the names of its             ;
;    contributors may be used to endorse or promote products derived from this ;
;    software without specific prior written permission.                        ;
;                                                                              ;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  ;
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    ;
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ;
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    ;
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          ;
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         ;
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     ;
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      ;
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      ;
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   ;
; POSSIBILITY OF SUCH DAMAGE.                                                  ;
;##############################################################################;

    EVEN

; Macro that resets the 9.5 frame delay
; 78 cycles in total
    .defm RESET_DLY
    CLR CRU
    SBO 0 ; 12 cycles
    INCT CRU ; 10 cycles
    LI A1, >3FFF ; 12 cycles
    LDCR A1, 14 ; 22 cycles
    DECT CRU ; 10 cycles
    SBZ 0 ; 12 cycles
    .endm

VREAD EQU >8800
VSTAT EQU >8802
VWRIT EQU >8C00
VCOMM EQU >8C02
VDPCHA EQU >0000
VDPSCA EQU >0800
VDPCTA EQU >0B00
SHGHT EQU 24
SWDTH EQU 32
NULL EQU 0

WSREGS EQU >8300
LDBANK EQU >8320
; Basic screen notification pointer
NOTIFY EQU >8340
MUSI EQU >8342
MUSD EQU >8344
KEYS EQU >8345
KEYR1 EQU >8345
KEYR2 EQU >8346
KEYR3 EQU >8347
KEYR4 EQU >8348
KEYR5 EQU >8349
KEYR6 EQU >834A
KEYR7 EQU >834B
KEYR8 EQU >834C
; Demo-specific variables
UNLOCK EQU >8350

A1 EQU 0 ; Accumulator register 1
A2 EQU 1 ; Accumulator register 2
A3 EQU 2 ; Accumulator register 3
A4 EQU 3 ; Accumulator register 4
A5 EQU 4 ; Accumulator register 5
A6 EQU 5 ; Accumulator register 6
A7 EQU 6 ; Accumulator register 7
A8 EQU 7 ; Accumulator register 8
MAP EQU 8 ; Map pointer register
RX EQU 9 ; Ray X register
RY EQU 10 ; Ray Y register
RTADDR EQU 11 ; Return address register
CRU EQU 12 ; CRU address register
PX EQU 13 ; Player X register
PY EQU 14 ; Player Y register
PA EQU 15 ; Player angle register

    AORG >6000
    BANK 0

CRTHED
    BYTE >AA    ; Standard header n stuff
    BYTE >01    ; Program version (I think?)
    BYTE >00    ; Number of programs on the cart
    BYTE 'R'    ; This tells FinalGROM to use RAM mode(4k ROM, 4k RAM)
    DATA >0000  ; Pointer to the powerup list (n/a)
    DATA MENU   ; Pointer to the program list
    DATA >0000  ; Pointer to the DSLR list (n/a)
    DATA >0000  ; Pointer to the subroutine list (n/a)

MENU
ITEM1
    DATA >0000  ; Pointer to the second menu item (n/a)
    DATA INIT   ; Pointer to the main label
    BYTE 9     ; Length of the text
    TEXT 'VEPSEU 99' ; Text
    EVEN

; VDCCMD: Send a command to the VDC
; A5 = complete 2-byte command
; 66 cycles in total
VDCCMD
    MOVB A5, @VCOMM ; 22 cycles
    SWPB A5 ; 10 cycles
    MOVB A5, @VCOMM ; 22 cycles
    RT ; 12 cycles

; VDCSRG: Set the value of a VDC register
; A5 = register number, A6 = register value
; 120 cycles in total
VDCSRG
    SWPB A6 ; 10 cycles
    SOC A6, A5 ; 14 cycles
    ORI A5, >80 ; 14 cycles
    JMP VDCCMD ; 16 cycles + 66 cycles

; VDCSWA: Set the write address pointer of the VDC
; A5 = address
; 120 cycles in total
VDCSWA
    ANDI A5, >7FFF ; 14 cycles
    ORI A5, >4000 ; 14 cycles
    SWPB A5 ; 10 cycles
    JMP VDCCMD ; 16 cycles + 66 cycles

; VDCSRA: Set the read address pointer of the VDC
; A5 = address
; 90 cycles in total
VDCSRA
    ANDI A5, >7FFF ; 14 cycles
    SWPB A5 ; 10 cycles
    JMP VDCCMD ; 16 cycles + 66 cycles

; INIT takes an estimated 12394 cycles in total!
INIT
; Make sure interrupts are off
; 16 cycles
    LIMI 0 ; 16 cycles
; Make sure the workspace registers are in the right place
; 10 cycles
    LWPI WSREGS ; 10 cycles

; Move the old characters to the new character space. Default location is >0800
; First, initialize the read loop
; 146 cycles
    LI A5, >0800 ; 12 cycles
    BL @VDCSRA ; (20 + 90) cycles

    LI A1, INTTMP ; 12 cycles
; We only care about the first 128 characters. Therefore the first (128*8) bytes
    LI A2, >0400 ; 12 cycles
; Move all the old characters from the VDP into cartridge RAM
; 1024(>400) loops, 49,150 cycles
INITL1
    MOVB @VREAD, *A1+ ; 28 cycles
    DEC A2 ; 10 cycles
    JNE INITL1 ; 10 cycles, - 2 on the final loop

; Initialize the write loop
    LI A5, >0000 ; 12 cycles
    BL @VDCSWA ; 20 + 120 cycles

    LI A1, INTTMP ; 12 cycles
    LI A2, >0400 ; 12 cycles
; Move all the old characters from cartridge RAM to the VDP
; 1024(>400) loops, 49,150 cycles
INITL2
    MOVB *A1+, @VWRIT ; 28 cycles
    DEC A2 ; 10 cycles
    JNE INITL2 ; 10 cycles, -2 on the final loop

; Set the 0th register to all 0s
; 160 cycles
    CLR A5 ; 10 cycles
    CLR A6 ; 10 cycles
    BL @VDCSRG ; 20 cycles + 120 cycles

; Enable the 1st and 2nd bit on the first register
; (enable the screen and vdp interrupts)
; 164 cycles
    LI A5, >01 ; 12 cycles
    LI A6, >E1 ; 12 cycles
    BL @VDCSRG ; 20 cycles + 120 cycles

; Set the video buffer to the address 2*>400, aka >800
; 164 cycles
    LI A5, >02 ; 12 cycles
    LI A6, >02 ; 12 cycles
    BL @VDCSRG ; 20 cycles + 120 cycles

; Set the character pattern address to 0
; 162 cycles
    LI A5, >04 ; 12 cycles
    CLR A6 ; 10 cycles
    BL @VDCSRG ; 20 cycles + 120 cycles

; Set the sprite attributes table to >18*>80, aka >0C00
; 164 cycles
    LI A5, >05 ; 12 cycles
    LI A6, >18 ; 12 cycles
    BL @VDCSRG ; 20 cycles + 120 cycles

; Set the sprite pattern address to 2*>800, aka 1000
; 164 cycles
    LI A5, >06 ; 12 cycles
    LI A6, >02 ; 12 cycles
    BL @VDCSRG ; 20 cycles + 120 cycles

; Set the background color to black
; 164 cycles
    LI A5, >07 ; 12 cycles
    LI A6, >11 ; 12 cycles
    BL @VDCSRG ; 20 cycles + 120 cycles

; Place the color table behind the screen at address >2C*>40, aka >0B00
; 164 cycles
    LI A5, >03 ; 12 cycles
    LI A6, >2C ; 12 cycles
    BL @VDCSRG ; 20 cycles + 120 cycles

; Load ldbank into scratchpad ram...
; 36 cycles
; Set A1 to point to LDBRAW
    LI A1, LDBRAW ; 12 cycles
; Set A2 to point ot LDBANK
    LI A2, LDBANK ; 12 cycles
; Set A3 to hold the size of LDBANK in words(ldbank is 16 words long)
    LI A3, 16 ; 12 cycles
; Loop until all the words are loaded into memory
; 16 loops, 798 cycles in total
LDBRL1
    MOV *A1+, *A2+ ; 30 cycles
    DEC A3 ; 10 cycles
    JNE LDBRL1 ; 10 cycles, -2 cycles on final loop

; Load the color pallet onto the VDP
; 1682 cycles in total
    BL @LDCLR ; 20 + 1662 cycles

; Load the texture table onto the VDP
; 50,090 cycles in total
    LI A5, TEXTBL ; 12 cycles
    BL @LDTEX ; 20 + 50,058 cycles

; Load the first map
; 123,338 cycles in total
    LI A5, 1 ; 12 cycles
    BL @LDMAP ; 123,326 cycles in total

; Set all the KEYP variables to false
; 120 cycles in total
    CLR A1 ; 10 cycles
    MOVB A1, @KEYP_W ; 22 cycles
    MOVB A1, @KEYP_S ; 22 cycles
    MOVB A1, @KEYP_D ; 22 cycles
    MOVB A1, @KEYP_A ; 22 cycles
    MOVB A1, @KEYP_1 ; 22 cycles

; Set the CRU's decrement timer to 9.5 frames
; 78 cycles in total
    .RESET_DLY

LOOP
    BL @KEYBRD
    BL @MUSIC
    BL @RENDER
    BL @SCENES
    BL @ACT
    BL @DRWNOT
    BL @RNDPSH
    BL @FRMDLY ; Waits until 10 frames have passed since the last .RESET_DLY
; Go to the start of the loop
; 8 cycles
    JMP LOOP ; 8 cycles
;##############################################################################;
; ram.a99 - general ram layout for the upper 4k of the cart                    ;
*==============================================================================*
; This file is a part of VePseu 99!                                            ;
;                                                                              ;
; Copyright (c) 2020, Charles Thompson. All rights reserved.                   ;
;                                                                              ;
; Redistribution and use in source and binary forms, with or without           ;
; modification, are permitted provided that the following conditions are met:  ;
;                                                                              ;
; 1. Redistributions of source code must retain the above copyright notice,    ;
;    this list of conditions and the following disclaimer.                     ;
; 2. Redistributions in binary form must reproduce the above copyright notice, ;
;    this list of conditions and the following disclaimer in the documentation ;
;    and/or other materials provided with the distribution.                    ;
; 3. Neither the name of the copyright holder nor the names of its             ;
;    contributors may be used to endorse or promote products derived from this ;
;    software without specific prior written permission.                       ;
*
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  ;
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    ;
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ;
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    ;
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          ;
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         ;
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     ;
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      ;
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      ;
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   ;
; POSSIBILITY OF SUCH DAMAGE.                                                  ;
;##############################################################################;

; Macros of which change the RAM banks

    .defm SRB0
    CLR @>6800
    .endm

    .defm SRB1
    CLR @>6802
    .endm

INTTMP EQU >7000

; The screen buffer, extends from >7000 to >7300
SCRNBF  EQU >7000
SCRNBH  EQU >7180
SCRNBL  EQU >300

KEYP_W EQU >73B1
KEYP_S EQU >73B2
KEYP_D EQU >73B3
KEYP_A EQU >73B4
KEYP_1 EQU >73B5
; Bit 7, weight >02, is set if a action has been loaded this frame
; Bit 8, weight >01, is set if a sprite is drawn this frame
STAT1 EQU >73B7
; Bit 8, weight >1, is set if the #1 key is pressed
STAT2 EQU >73B8

ACTION EQU >7300
DRAWNL EQU >7380

RAMMAP EQU >7800

RBANK2 EQU >7000

MAPPTR EQU >7000
CURSCN EQU >7002
CURMUS EQU >7004

    PAGE
;##############################################################################;
; tables.a99 - multiple collections of important non-code data                 ;
*==============================================================================*
; This file is a part of VePseu 99!                                            ;
;                                                                              ;
; Copyright (c) 2020, Charles Thompson. All rights reserved.                   ;
;                                                                              ;
; Redistribution and use in source and binary forms, with or without           ;
; modification, are permitted provided that the following conditions are met:  ;
;                                                                              ;
; 1. Redistributions of source code must retain the above copyright notice,    ;
;    this list of conditions and the following disclaimer.                     ;
; 2. Redistributions in binary form must reproduce the above copyright notice, ;
;    this list of conditions and the following disclaimer in the documentation ;
;    and/or other materials provided with the distribution.                    ;
; 3. Neither the name of the copyright holder nor the names of its             ;
;    contributors may be used to endorse or promote products derived from this ;
;    software without specific prior written permission.                       ;
*
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  ;
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    ;
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ;
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    ;
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          ;
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         ;
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     ;
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      ;
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      ;
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   ;
; POSSIBILITY OF SUCH DAMAGE.                                                  ;
;##############################################################################;

; Wall style table, formatted as follows:
; y offset(if 0, end of wall table is signaled)
; x offset
; color a
; color b
; vertical line draw list size in bytes
; vertical line draw list, position, height, and color selection(boolean 0 or 8)

DNOTIF  DATA 0

    EVEN
NOTES
;        |A   |A#   |B    |C    |C#   |D    |D#   |E    |F    |F#   |G    |G#
;          2     2    2     2      2    2      2    2     2      2    2      2
    DATA >93F, >03C, >A38, >735, >732, >A2F, >F2C, >72A, >128, >D25, >B23, >B21
;          3     3    3     3      3    3      3    3     3      3    3      3
    DATA >C1F, >01E, >51C, >C1A, >419, >D17, >816, >315, >014, >E12, >D11, >D10
;          4     4    4     4      4    4      4    4     4      4    4      4
    DATA >E0F, >00F, >20E, >60D, >A0C, >E0B, >40B, >A0A, >00A, >709, >F08, >708
;          5     5    5     5      5    5      5    5     5      5    5      5
    DATA >F07, >807, >107, >B06, >506, >F05, >A05, >505, >005, >C04, >704, >304
;          6     6    6     6      6    6      6    6     6      6    6      6
    DATA >004, >C03, >903, >503, >203, >003, >D02, >A02, >802, >602, >402, >202
;          7     7    7     7      7    7      7    7     7
    DATA >002, >E01, >C01, >B01, >901, >801, >601, >501, >401

WALTBL

WAL1
    BYTE 0
    BYTE -1
    BYTE 9
    BYTE 29, 22, 8
    BYTE 30, 22, 8
    BYTE 31, 22, 8

WAL2
    BYTE 0
    BYTE 1
    BYTE 9
    BYTE 0, 22, 8
    BYTE 1, 22, 8
    BYTE 2, 22, 8

WAL3
    BYTE 1 ; y offset
    BYTE 0 ; x offset
    BYTE 78 ; length of the vertical line draw list in bytes
    BYTE 3, 22, 0
    BYTE 4, 22, 0
    BYTE 5, 22, 0
    BYTE 6, 22, 0
    BYTE 7, 22, 0
    BYTE 8, 22, 0
    BYTE 9, 22, 0
    BYTE 10, 22, 0
    BYTE 11, 22, 0
    BYTE 12, 22, 0
    BYTE 13, 22, 0
    BYTE 14, 22, 0
    BYTE 15, 22, 0
    BYTE 16, 22, 0
    BYTE 17, 22, 0
    BYTE 18, 22, 0
    BYTE 19, 22, 0
    BYTE 20, 22, 0
    BYTE 21, 22, 0
    BYTE 22, 22, 0
    BYTE 23, 22, 0
    BYTE 24, 22, 0
    BYTE 25, 22, 0
    BYTE 26, 22, 0
    BYTE 27, 22, 0
    BYTE 28, 22, 0

WAL4
    BYTE 1
    BYTE -1
    BYTE 30
    BYTE 22, 14, 8
    BYTE 23, 16, 8
    BYTE 24, 17, 8
    BYTE 25, 18, 8
    BYTE 26, 19, 8
    BYTE 27, 20, 8
    BYTE 28, 22, 8
    BYTE 29, 22, 0
    BYTE 30, 22, 0
    BYTE 31, 22, 0

WAL5
    BYTE 1
    BYTE 1
    BYTE 30
    BYTE 0, 22, 0
    BYTE 1, 22, 0
    BYTE 2, 22, 0
    BYTE 3, 22, 8
    BYTE 4, 20, 8
    BYTE 5, 19, 8
    BYTE 6, 18, 8
    BYTE 7, 17, 8
    BYTE 8, 16, 8
    BYTE 9, 14, 8

WAL6
    BYTE 2
    BYTE 0
    BYTE 36
    BYTE 10, 12, 0
    BYTE 11, 12, 0
    BYTE 12, 12, 0
    BYTE 13, 12, 0
    BYTE 14, 12, 0
    BYTE 15, 12, 0
    BYTE 16, 12, 0
    BYTE 17, 12, 0
    BYTE 18, 12, 0
    BYTE 19, 12, 0
    BYTE 20, 12, 0
    BYTE 21, 12, 0

WAL7
    BYTE 2
    BYTE -1
    BYTE 39
    BYTE 19, 8, 8
    BYTE 20, 10, 8
    BYTE 21, 12, 8
    BYTE 22, 12, 0
    BYTE 23, 12, 0
    BYTE 24, 12, 0
    BYTE 25, 12, 0
    BYTE 26, 12, 0
    BYTE 27, 12, 0
    BYTE 28, 12, 0
    BYTE 29, 12, 0
    BYTE 30, 12, 0
    BYTE 31, 12, 0

WAL8
    BYTE 2
    BYTE 1
    BYTE 39
    BYTE 0, 12, 0
    BYTE 1, 12, 0
    BYTE 2, 12, 0
    BYTE 3, 12, 0
    BYTE 4, 12, 0
    BYTE 5, 12, 0
    BYTE 6, 12, 0
    BYTE 7, 12, 0
    BYTE 8, 12, 0
    BYTE 9, 12, 0
    BYTE 10, 12, 8
    BYTE 11, 10, 8
    BYTE 12, 8, 8

WAL9
    BYTE 2
    BYTE -2
    BYTE 18
    BYTE 26, 7, 8
    BYTE 27, 8, 8
    BYTE 28, 9, 8
    BYTE 29, 10, 8
    BYTE 30, 11, 8
    BYTE 31, 12, 8

WALA
    BYTE 2
    BYTE 2
    BYTE 18
    BYTE 0, 12, 8
    BYTE 1, 11, 8
    BYTE 2, 10, 8
    BYTE 3, 9, 8
    BYTE 4, 8, 8
    BYTE 5, 7, 8

WALB
    BYTE 3
    BYTE 0
    BYTE 18
    BYTE 13, 6, 0
    BYTE 14, 6, 0
    BYTE 15, 6, 0
    BYTE 16, 6, 0
    BYTE 17, 6, 0
    BYTE 18, 6, 0

WALC
    BYTE 3
    BYTE -1
    BYTE 27
    BYTE 17, 4, 8
    BYTE 18, 6, 8
    BYTE 19, 6, 0
    BYTE 20, 6, 0
    BYTE 21, 6, 0
    BYTE 22, 6, 0
    BYTE 23, 6, 0
    BYTE 24, 6, 0
    BYTE 25, 6, 0

WALD
    BYTE 3
    BYTE 1
    BYTE 27
    BYTE 6, 6, 0
    BYTE 7, 6, 0
    BYTE 8, 6, 0
    BYTE 9, 6, 0
    BYTE 10, 6, 0
    BYTE 11, 6, 0
    BYTE 12, 6, 0
    BYTE 13, 6, 8
    BYTE 14, 4, 8

WALE
    BYTE 3
    BYTE -2
    BYTE 24
    BYTE 24, 4, 8
    BYTE 25, 6, 8
    BYTE 26, 6, 0
    BYTE 27, 6, 0
    BYTE 28, 6, 0
    BYTE 29, 6, 0
    BYTE 30, 6, 0
    BYTE 31, 6, 0

WALF
    BYTE 3
    BYTE 2
    BYTE 24
    BYTE 0, 6, 0
    BYTE 1, 6, 0
    BYTE 2, 6, 0
    BYTE 3, 6, 0
    BYTE 4, 6, 0
    BYTE 5, 6, 0
    BYTE 6, 6, 8
    BYTE 7, 4, 8

    BYTE 0, 0

    PAGE

CLRTBL
    BYTE -31, -2, -127, -106, -95, -70, -63, 49, -20, -13, -24, -7, -84, -77, -88, -71
TEXTBL
    BYTE 0, 36, 36, 126, 36, 126, 36, 36, 0, 16, 56, 80, 56, 20, 56, 16
    BYTE 0, 0, 16, 16, 124, 16, 16, 0, 0, 0, 0, 0, 56, 0, 0, 0
    BYTE 0, 28, 34, 90, 86, 92, 32, 30, 0, 16, 84, 56, 124, 56, 84, 16
    BYTE 0, 0, 98, 100, 8, 16, 38, 70, 0, 48, 72, 72, 48, 74, 68, 58;##############################################################################;
; act.a99 - code that draws and activates actions                              *
;==============================================================================;
; This file is a part of VePseu 99!                                             ;
;                                                                              ;
; Copyright (c) 2020, Charles Thompson. All rights reserved.                   ;
;                                                                              ;
; Redistribution and use in source and binary forms, with or without           ;
; modification, are permitted provided that the following conditions are met:   ;
;                                                                              ;
; 1. Redistributions of source code must retain the above copyright notice,    ;
;    this list of conditions and the following disclaimer.                     ;
; 2. Redistributions in binary form must reproduce the above copyright notice, ;
;    this list of conditions and the following disclaimer in the documentation ;
;    and/or other materials provided with the distribution.                    ;
; 3. Neither the name of the copyright holder nor the names of its             ;
;    contributors may be used to endorse or promote products derived from this ;
;    software without specific prior written permission.                        ;
;                                                                              ;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  ;
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    ;
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ;
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    ;
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          ;
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         ;
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     ;
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      ;
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      ;
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   ;
; POSSIBILITY OF SUCH DAMAGE.                                                  ;
;##############################################################################;

    EVEN


ACT
    LI A1, ACTION
    LI A2, SCRNBF+SCRNBL-32
ACTL1
    MOVB *A1+, *A2+
    JEQ ACTEND
    LI A3, 5
ACTL2
    MOVB *A1+, *A2+
    DEC A3
    JNE ACTL2
    MOV *A1+, A3

    CLR A4
    MOVB @STAT2, A4
    ANDI A4, >0100
    JEQ ACTL1
; The code is in the 2nd RAM bank, this is getting kinda messy...
    MOV RTADDR, A4
    .SRB1
    BL *A3
    .SRB0
    B *A4

ACTEND
    RT

NO_ACT
    RT
;##############################################################################;
; DRWNOT - Code that draws notifications                                       ;
;==============================================================================;
; This file is a part of VePseu 99!                                            ;
;                                                                              ;
; Copyright (c) 2020, Charles Thompson. All rights reserved.                   ;
;                                                                              ;
; Redistribution and use in source and binary forms, with or without           ;
; modification, are permitted provided that the following conditions are met:  ;
;                                                                              ;
; 1. Redistributions of source code must retain the above copyright notice,    ;
;    this list of conditions and the following disclaimer.                     ;
; 2. Redistributions in binary form must reproduce the above copyright notice, ;
;    this list of conditions and the following disclaimer in the documentation ;
;    and/or other materials provided with the distribution.                    ;
; 3. Neither the name of the copyright holder nor the names of its             ;
;    contributors may be used to endorse or promote products derived from this ;
;    software without specific prior written permission.                       ;
;                                                                              ;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  ;
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    ;
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ;
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    ;
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          ;
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         ;
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     ;
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      ;
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      ;
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   ;
; POSSIBILITY OF SUCH DAMAGE.                                                  ;
;##############################################################################;

    EVEN

DRWNOT
    MOV @NOTIFY, A1
    LI A2, SCRNBF
DRWNL1
; All the ram we need is in the 2nd RAM bank...
    .SRB1
    MOVB *A1+, A3
; And the screen buffer is in the 1st...
    .SRB0
    MOVB A3, *A2+
    JNE DRWNL1

    RT;##############################################################################;
; keyboard.a99 - code used to take and utilize input from the keyboard         ;
;==============================================================================;
; This file is a part of VePseu 99!                                             ;
;                                                                              ;
; Copyright (c) 2020, Charles Thompson. All rights reserved.                   ;
;                                                                              ;
; Redistribution and use in source and binary forms, with or without           ;
; modification, are permitted provided that the following conditions are met:   ;
;                                                                              ;
; 1. Redistributions of source code must retain the above copyright notice,    ;
;    this list of conditions and the following disclaimer.                     ;
; 2. Redistributions in binary form must reproduce the above copyright notice, ;
;    this list of conditions and the following disclaimer in the documentation ;
;    and/or other materials provided with the distribution.                    ;
; 3. Neither the name of the copyright holder nor the names of its             ;
;    contributors may be used to endorse or promote products derived from this ;
;    software without specific prior written permission.                        ;
;                                                                              ;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  ;
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    ;
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ;
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    ;
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          ;
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         ;
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     ;
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      ;
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      ;
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   ;
; POSSIBILITY OF SUCH DAMAGE.                                                  ;
;##############################################################################;

    EVEN

KEYBRD
    CLR RX
    CLR RY

; W Key
KEY_W
    LI A1, >4000
    SZCB @KEYR2, A1
    SOCB @KEYP_W, A1
    JNE KEY_WN
    INC RY
    SETO A1
    MOVB A1, @KEYP_W
    JMP KEY_S

KEY_WN
    CLR A1
    MOVB A1, @KEYP_W
; S Key
KEY_S
    LI A1, >2000
    SZCB @KEYR2, A1
    SOCB @KEYP_S, A1
    JNE KEY_SN
    DEC RY
    SETO A1
    MOVB A1, @KEYP_S
    JMP KEY_D
   
KEY_SN
    CLR A1
    MOVB A1, @KEYP_S
; D Key
KEY_D
    LI A1, >2000
    SZCB @KEYR3, A1
    SOCB @KEYP_D, A1
    JNE KEY_DN
    DEC PA
    SETO A1
    MOVB A1, @KEYP_D
    JMP KEY_A

KEY_DN
    CLR A1
    MOVB A1, @KEYP_D
; A Key
KEY_A
    LI A1, >2000
    SZCB @KEYR6, A1
    SOCB @KEYP_A, A1
    JNE KEY_AN
    INC PA
    SETO A1
    MOVB A1, @KEYP_A
    JMP KEY_1

KEY_AN
    CLR A1
    MOVB A1, @KEYP_A
; 1st action key
KEY_1
    LI A1, >1000
    SZCB @KEYR6, A1
    SOCB @KEYP_1, A1
    JNE KEY_1N
    LI A1, >0100
    SOCB A1, @STAT2
    SETO A1
    MOVB A1, @KEYP_1
    JMP KEY_2

KEY_1N
    CLR A1
    MOVB A1, @KEYP_1
    LI A1, >0100
    SZCB A1, @STAT2
KEY_2
    
; Update the player's position
; First perform player-angle specific calculations
    ANDI PA, >03
; Is NEG (bit 7) set?
    MOV PA, A1
    ANDI A1, >02
    JEQ KEYB1
    NEG RY
KEYB1
; Is SWAP(bit 8) set?
    MOV PA, A1
    ANDI A1, >01
    JNE KEYB2
KEYB2R
; Make sure that the player isn't trying to move into a wall
    MOV RY, A1
    A PY, A1
    SLA A1, 4
    A RX, A1
    A PX, A1
    A MAP, A1
    CLR A2
    MOVB *A1, A2
    JNE KEYB3
    
    A RX, PX
    A RY, PY

KEYB3
    
; Clear the keys
    CLR A1
    LI A2, KEYS
    LI A3, 8
KEYL1
    MOVB A1, *A2
    INC A2
    DEC A3
    JNE KEYL1
    
    RT

KEYB2
    MOV RY, RX
    CLR RY
    JMP KEYB2R
;##############################################################################;
; music.a99 - plays level music                                                ;
;==============================================================================;
; This file is a part of VePseu 99!                                            ;
;                                                                              ;
; Copyright (c) 2020, Charles Thompson. All rights reserved.                   ;
;                                                                              ;
; Redistribution and use in source and binary forms, with or without           ;
; modification, are permitted provided that the following conditions are met:  ;
;                                                                              ;
; 1. Redistributions of source code must retain the above copyright notice,    ;
;    this list of conditions and the following disclaimer.                     ;
; 2. Redistributions in binary form must reproduce the above copyright notice, ;
;    this list of conditions and the following disclaimer in the documentation ;
;    and/or other materials provided with the distribution.                    ;
; 3. Neither the name of the copyright holder nor the names of its             ;
;    contributors may be used to endorse or promote products derived from this ;
;    software without specific prior written permission.                       ;
;                                                                              ;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  ;
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    ;
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ;
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    ;
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          ;
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         ;
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     ;
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      ;
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      ;
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   ;
; POSSIBILITY OF SUCH DAMAGE.                                                  ;
;##############################################################################;

NOISB EQU >E600
AUDO1 EQU >8000
AUDO2 EQU >A000
SADDR EQU >8400

    EVEN

MUSIC
; If we're still playing the last note, don't do anyhting
    CLR A1
    MOVB @MUSD, A1
    CI A1, >0100
    JNE MUSEND
    .SRB1
    MOV @MUSI, A1
    MOVB *A1+, @MUSD
; If the duration is 0, reset the song
    JEQ MUSB1
MUSB1R
    LI A2, SADDR
; Store the c0 volume to the noise channel
; Load the default noise address/mode byte into A3
    LI A3, NOISB
; Send that byte to the sound address
    MOVB A3, *A2
; Send the attenuation of the noise address to the sound address
    MOVB *A1+, *A2
; Store the c1 volume and note to the 1st square wave channel
    CLR A3
    MOVB *A1+, A3
    SWPB A3
    SLA A3, 1
    AI A3, NOTES
    MOV *A3, A4
    ORI A4, AUDO1
    MOVB A4, *A2
    SWPB A4
    MOVB A4, *A2
    MOVB *A1+, *A2
; Store the c2 volume and note to the 2nd square wave channel
    CLR A3
    MOVB *A1+, A3
    SWPB A3
    SLA A3, 1
    AI A3, NOTES
    MOV *A3, A4
    ORI A4, AUDO2
    MOVB A4, *A2
    SWPB A4
    MOVB A4, *A2
    MOVB *A1+, *A2
    .SRB0
    MOV A1, @MUSI
    RT

MUSB1
    MOV @CURMUS, A1
    MOVB *A1+, @MUSD
    JMP MUSB1R

MUSEND
    AI A1, ->0100
    MOV A1, @MUSD
    RT
;##############################################################################;
; template.a99 - template for all VePseu99 files!                               ;
;==============================================================================;
; This file is a part of VePseu 99!                                             ;
;                                                                              ;
; Copyright (c) 2020, Charles Thompson. All rights reserved.                   ;
;                                                                              ;
; Redistribution and use in source and binary forms, with or without           ;
; modification, are permitted provided that the following conditions are met:   ;
;                                                                              ;
; 1. Redistributions of source code must retain the above copyright notice,    ;
;    this list of conditions and the following disclaimer.                     ;
; 2. Redistributions in binary form must reproduce the above copyright notice, ;
;    this list of conditions and the following disclaimer in the documentation ;
;    and/or other materials provided with the distribution.                    ;
; 3. Neither the name of the copyright holder nor the names of its             ;
;    contributors may be used to endorse or promote products derived from this ;
;    software without specific prior written permission.                        ;
;                                                                              ;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  ;
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    ;
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ;
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    ;
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          ;
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         ;
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     ;
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      ;
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      ;
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   ;
; POSSIBILITY OF SUCH DAMAGE.                                                  ;
;##############################################################################;

    EVEN
;##############################################################################;
; ldbank.a99 - loads a ROM BANK into the second RAM bank!                      ;
;==============================================================================;
; This file is a part of VePseu 99!                                            ;
;                                                                              ;
; Copyright (c) 2020, Charles Thompson. All rights reserved.                   ;
;                                                                              ;
; Redistribution and use in source and binary forms, with or without           ;
; modification, are permitted provided that the following conditions are met:  ;
;                                                                              ;
; 1. Redistributions of source code must retain the above copyright notice,    ;
;    this list of conditions and the following disclaimer.                     ;
; 2. Redistributions in binary form must reproduce the above copyright notice, ;
;    this list of conditions and the following disclaimer in the documentation ;
;    and/or other materials provided with the distribution.                    ;
; 3. Neither the name of the copyright holder nor the names of its             ;
;    contributors may be used to endorse or promote products derived from this ;
;    software without specific prior written permission.                       ;
;                                                                              ;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  ;
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    ;
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ;
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    ;
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          ;
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         ;
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     ;
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      ;
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      ;
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   ;
; POSSIBILITY OF SUCH DAMAGE.                                                  ;
;##############################################################################;

; Theoretically, if we don't use any branch functions we can just load this
; into scratchpad ram and it'll work perfectly...
; LDBRAW is 32 bytes in size and is not called directly, it is instead stored in
; scratchpad ram
; A5 = bank to switch to
; 102,494 cycles in total
LDBRAW
; Switch to the disired ROM bank
; 38 cycles in total
; All banks are on even addresses, multiply by 2...
    SLA A5, 1 ; 14 cycles
; ROM banks start at >6000
    AI A5, >6000 ; 14 cycles
; Write to that address through a clr
    CLR *A5 ; 10 cycles
; Initialize the loop
; 36 cycles in total
; Set A5 to point to the start of rom, A6 to point to the start of RAM, and A7
; to hold the size of ROM/RAM in bytes(>1000 = 4kb)
    LI A5, >6000 ; 12 cycles
    LI A6, >7000 ; 12 cycles
    LI A7, >1000 ; 12 cycles
; Now we simply copy everything over to ram!
; 4096/2(>1000/2) loops, 102,398 cycles in total
LDBL1
    MOV *A5+, *A6+ ; 30 cycles
    DECT A7 ; 10 cycles
    JNE LDBL1 ; 10 cycles, -2 at the end of a loop
; Change back to bank 0, and we're done!
; 22 cycles in total
    CLR @>6000 ; 10 cycles
    RT ; 12 cycles
;##############################################################################;
; ldclr.a99 - contains code that loads the color table                         ;
;==============================================================================;
; This file is a part of VePseu 99!                                             ;
;                                                                              ;
; Copyright (c) 2020, Charles Thompson. All rights reserved.                   ;
;                                                                              ;
; Redistribution and use in source and binary forms, with or without           ;
; modification, are permitted provided that the following conditions are met:   ;
;                                                                              ;
; 1. Redistributions of source code must retain the above copyright notice,    ;
;    this list of conditions and the following disclaimer.                     ;
; 2. Redistributions in binary form must reproduce the above copyright notice, ;
;    this list of conditions and the following disclaimer in the documentation ;
;    and/or other materials provided with the distribution.                    ;
; 3. Neither the name of the copyright holder nor the names of its             ;
;    contributors may be used to endorse or promote products derived from this ;
;    software without specific prior written permission.                        ;
;                                                                              ;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  ;
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    ;
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ;
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    ;
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          ;
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         ;
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     ;
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      ;
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      ;
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   ;
; POSSIBILITY OF SUCH DAMAGE.                                                  ;
;##############################################################################;

    EVEN

; Load the color table onto the VDP
; Takes 1662 cycles in total!
LDCLR
; Initialize the loop
; 166 cycles
    MOV RTADDR, A2 ; 14 cycles
; Set the write address to VDPCTA
    LI A5, VDPCTA ; 12 cycles
    BL @VDCSWA ; 20 cycles + 120 cycles
; First make all the text white on black (the first 16 color entries)
; 24 cycles
    LI A1, >F100 ; 12 cycles
    LI A3, >10 ; 12 cycles
; Load the white-on-black color pallet into ram
; 16 loops, 670 cycles in total
LDCL1
    MOVB A1, @VWRIT; 22 cycles
    DEC A3 ; 10 cycles
    JNE LDCL1 ; 10 cycles, -2 at the end of the loop

; Initialize the loop
; 24 cycles
    LI A1, CLRTBL ; 12 cycles
    LI A3, >10 ; 12 cycles
; Load the color pallet onto the vdp
; 16 loops, 766 cycles in total
LDCL2
    MOVB *A1+, @VWRIT ; 28 cycles
    DEC A3 ; 10 cycles
    JNE LDCL2 ; 10 cycles, -2 at the end of the loop
; Return! 12 cycles
    B *A2
;##############################################################################;
; ldmap.a99 - contains code that loads a map from a given bank                 ;
;==============================================================================;
; This file is a part of VePseu 99!                                             ;
;                                                                              ;
; Copyright (c) 2020, Charles Thompson. All rights reserved.                   ;
;                                                                              ;
; Redistribution and use in source and binary forms, with or without           ;
; modification, are permitted provided that the following conditions are met:   ;
;                                                                              ;
; 1. Redistributions of source code must retain the above copyright notice,    ;
;    this list of conditions and the following disclaimer.                     ;
; 2. Redistributions in binary form must reproduce the above copyright notice, ;
;    this list of conditions and the following disclaimer in the documentation ;
;    and/or other materials provided with the distribution.                    ;
; 3. Neither the name of the copyright holder nor the names of its             ;
;    contributors may be used to endorse or promote products derived from this ;
;    software without specific prior written permission.                        ;
;                                                                              ;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  ;
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    ;
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ;
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    ;
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          ;
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         ;
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     ;
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      ;
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      ;
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   ;
; POSSIBILITY OF SUCH DAMAGE.                                                  ;
;##############################################################################;

; Length of the map in bytes
MAPLEN  EQU >100

    EVEN

; LDMAP - loads a map from a bank
; A5 = map number
; 123,326 cycles in total
LDMAP
; Load the map's bank into memory
; 102,562 cycles in total
    MOV RTADDR, A8 ; 14 cycles
    .SRB1 ; 10 cycles
    BL @LDBANK ; 20 + 102,494 cycles
    MOV A8, RTADDR ; 14 cycles
; Copy the map from RAM bank 2 to bank 1
; This is done to simplify render code, since the screen buffer is on bank 1
; If we kept the map on bank 2 things would slow down quite a bit, and at the
; cost of only about 256 bytes of ram
; Set A5 to point to the map
; 22 cycles in total
    MOV @MAPPTR, A5 ; 22 cycles
; Set PX, PY, and PA
;110 cycles in total
    CLR PX ; 10 cycles
    CLR PY ; 10 cycles
    CLR PA ; 10 cycles
    MOVB *A5+, PX ; 20 cycles
    SWPB PX ; 10 cycles
    MOVB *A5+, PY ; 20 cycles
    SWPB PY ; 10 cycles
    MOVB *A5+, PA ; 20 cycles
    SWPB PA ; 10 cycles

; Initialize for the loop
; 24 cycles in total
; A6 points to the map in bank 1
    LI A6, RAMMAP ; 12 cycles
; A7 holds the length of the map in bytes
    LI A7, MAPLEN ; 12 cycles
; Swap to bank 2, get a byte, swap to bank 1, store a byte..
; 256 loops, 20,478 cycles in total
LDML1
    MOVB *A5+, A8 ; 20 cycles
    .SRB0 ; 10 cycles
    MOVB A8, *A6+ ; 20 cycles
    DEC A7 ; 10 cycles
    .SRB1 ; 10 cycles
    JNE LDML1 ; 10 cycles, -2 at the end of the loop

; Set MAP to point to RAMMAP
; 12 cycles in total
    LI MAP, RAMMAP ; 12 cycles

; Initialize music stuff
; 64 cycles in total
; Set MUSI to CURMUS
    MOV @CURMUS, @MUSI ; 30 cycles
; Set the duration to 1
    LI A1, >0100 ; 12 cycles
    MOVB A1, @MUSD ; 22 cycles

; Go back to the first bank of ram
; 10 cycles in total
    .SRB0 ; 10 cycles

; Set the default notification
; 34 cycles in total
    LI A1, DNOTIF ; 12 cycles
    MOV A1, @NOTIFY ; 22 cycles

; Return!
; 12 cycles in total
    RT ; 12 cycles
;##############################################################################;
; ldtex.a99 - conctains code that loads textures                               ;
;==============================================================================;
; This file is a part of VePseu 99!                                             ;
;                                                                              ;
; Copyright (c) 2020, Charles Thompson. All rights reserved.                   ;
;                                                                              ;
; Redistribution and use in source and binary forms, with or without           ;
; modification, are permitted provided that the following conditions are met:   ;
;                                                                              ;
; 1. Redistributions of source code must retain the above copyright notice,    ;
;    this list of conditions and the following disclaimer.                     ;
; 2. Redistributions in binary form must reproduce the above copyright notice, ;
;    this list of conditions and the following disclaimer in the documentation ;
;    and/or other materials provided with the distribution.                    ;
; 3. Neither the name of the copyright holder nor the names of its             ;
;    contributors may be used to endorse or promote products derived from this ;
;    software without specific prior written permission.                        ;
;                                                                              ;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  ;
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    ;
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ;
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    ;
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          ;
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         ;
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     ;
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      ;
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      ;
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   ;
; POSSIBILITY OF SUCH DAMAGE.                                                  ;
;##############################################################################;

    EVEN

; Load textures
; A5 = pointer to textures
; 50,058 cycles in total!
LDTEX
; Set the VDP write address to halfway through the character table
; 180 cycles in total
    MOV A5, A1 ; 14 cycles
    MOV RTADDR, A2 ; 14 cycles
    LI A5, >0400 ; 12 cycles
    BL @VDCSWA ; 20 + 120 cycles
; Initialize the loop
; 12 cycles in total
    LI A3, 16 ; 12 cycles
; We repeat the same 8 textures 16 times
; 16 loops, 49,854 cycles in total
LDTL1
; Go to the start of the texture table
    MOV A1, A5 ; 14 cycles
; Prepare to load eight 8-byte textures
    LI A4, 8*8 ; 12 cycles
;-- Load the 8 textures onto the VDP
;-- 64 loops, 3070 cycles in total
LDTL2
    MOVB *A5+, @VWRIT ;-- 28 cycles
    DEC A4 ;-- 10 cycles
    JNE LDTL2 ;-- 10 cycles, -2 at the end of the loop
    DEC A3 ; 10 cycles
    JNE LDTL1 ; 10 cycles, -2 at the end of the loop

; Return!
; 12 cycles in total
    B *A2 ; 12 cycles
;##############################################################################;
; framedly.a99 - contains code that keeps VEPSEU at a constant framerate!      ;
;==============================================================================;
; This file is a part of VePseu 99!                                            ;
;                                                                              ;
; Copyright (c) 2020, Charles Thompson. All rights reserved.                   ;
;                                                                              ;
; Redistribution and use in source and binary forms, with or without           ;
; modification, are permitted provided that the following conditions are met:  ;
;                                                                              ;
; 1. Redistributions of source code must retain the above copyright notice,    ;
;    this list of conditions and the following disclaimer.                     ;
; 2. Redistributions in binary form must reproduce the above copyright notice, ;
;    this list of conditions and the following disclaimer in the documentation ;
;    and/or other materials provided with the distribution.                    ;
; 3. Neither the name of the copyright holder nor the names of its             ;
;    contributors may be used to endorse or promote products derived from this ;
;    software without specific prior written permission.                       ;
;                                                                              ;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  ;
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    ;
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ;
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    ;
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          ;
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         ;
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     ;
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      ;
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      ;
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   ;
; POSSIBILITY OF SUCH DAMAGE.                                                  ;
;##############################################################################;

    EVEN

; We want to delay until 9.5 frames have passed
DELAY EQU 4294

; Waits until 10 frames have passed since the last .RESET_DLY
FRMDLY
; Loop until a total of more than 9.5 frames have passed
; since the last .RESET_DLY
; 1488 cycles per loop
FRMDL1
; Initialize the loop
; A1 holds the keyboard column to read from, A2 hold the keyboard row to write
; to, A3 holds the amound of rows to read
; 34 cycles in total
    CLR A1 ; 10 cycles
    LI A2, KEYS ; 12 cycles
    LI A3, 8 ; 12 cycles
;-- Load any pressed keys into memory
;-- 8 loops, 1294 cycles in total
FRMDL2
    LI CRU, >0024 ;-- 12 cycles
    LDCR A1,3 ;-- 26 cycles
    LI CRU, >0006 ;-- 12 cycles
    STCR A4, 8 ;-- 44 cycles
    INV A4 ;-- 10 cycles
    SOCB A4, *A2 ;-- 14 cycles
    AI A1, >0100 ;-- 14 cycles
    INC A2 ;-- 10 cycles
    DEC A3 ;-- 10 cycles
    JNE FRMDL2 ;-- 10 cycles, -2 at the end of the loop

; Check to see if the CRU's decrementer has reset
; 160 cycles in total
    CLR CRU ; 10 cycles
    CLR A1 ; 10 cycles
    SBO 0 ; 12 cycles
    INC CRU ; 10 cycles
    STCR A1, 15 ; 58 cycles
    DEC CRU ; 10 cycles
    SBZ 0 ; 12 cycles
    SRL A1, 1 ; 14 cycles
    CI A1, >3FFF-DELAY ; 14 cycles
    JGT FRMDL1 ; 10 cycles, -2 at end of loop

; Initialize the loop
; 10 cycles in total
    CLR CRU ; 10 cycles
; Wait for the VDP interrupt
; 32 cycles per loop
FRMDL3
    TB 2 ; 12 cycles
    JEQ FRMDL3 ; 10 cycles

; Reset the CRU timer, and return!
; 90 cycles in total
    .RESET_DLY ; 78 cycles
    RT ; 12 cycles
;##############################################################################;
; render.a99 - code used to render a picture to the VDP                        ;
;==============================================================================;
; This file is a part of VePseu 99!                                             ;
;                                                                              ;
; Copyright (c) 2020, Charles Thompson. All rights reserved.                   ;
;                                                                              ;
; Redistribution and use in source and binary forms, with or without           ;
; modification, are permitted provided that the following conditions are met:   ;
;                                                                              ;
; 1. Redistributions of source code must retain the above copyright notice,    ;
;    this list of conditions and the following disclaimer.                     ;
; 2. Redistributions in binary form must reproduce the above copyright notice, ;
;    this list of conditions and the following disclaimer in the documentation ;
;    and/or other materials provided with the distribution.                    ;
; 3. Neither the name of the copyright holder nor the names of its             ;
;    contributors may be used to endorse or promote products derived from this ;
;    software without specific prior written permission.                        ;
;                                                                              ;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  ;
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    ;
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ;
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    ;
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          ;
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         ;
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     ;
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      ;
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      ;
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   ;
; POSSIBILITY OF SUCH DAMAGE.                                                  ;
;##############################################################################;

    EVEN


*RNDPSH: Pushes the rendered screen to the VDC
; 36,214 cycles in total
RNDPSH
; A1 is the pointer to the screen buffer
    LI A1, SCRNBF ; 12 cycles
; A2 is the length of the screen buffer
    LI A2, SCRNBL ; 12 cycles
; First set the VDC write address (See VDPSWA for comments, this is the same)
; The ORI and SWPB have been done beforehand
; A3 is used as a general-purpose register here
    LI A3, >0048 ; 12 cycles
    MOVB A3, @VCOMM ; 22 cycles
    SWPB A3 ; 10 cycles
    MOVB A3, @VCOMM ; 22 cycles
    LI A3, SCRNBF ; 12 cycles
; Then we just loop `n` write
RNDPL1
    MOVB *A1+, @VWRIT ; (28 ; half screen buffer size ) = 10,752 cycles
    MOVB *A1+, @VWRIT ; (28 ; half screen buffer size ) = 10,752 cycles
; We also clear the screen buffer as we write to the vdp
    CLR *A3+ ; (18 cycles ; half screen buffer size) = 6912
    DECT A2 ; (10 ; half screen buffer size) = 3840 cycles
    JNE RNDPL1 ; (10 ; half screen buffer size) - 2 = 3838 cycles
; The -2 cycles is for the not taken JNE at the end of the loop
    RT ; 18 cycles, end of tally

; RENDER: Render the screen!
; 57387 to 57882 cycles on average
RENDER

; Make sure all vertical lines are reset
; 1302 cycles
    LI A1, DRAWNL ; 12 cycles
    LI A2, 32 ; 12 cycles
    SETO A3
RNDL3
    MOVB A3, *A1+ ; (20 ; 32) = 640 cycles
    DEC A2 ; (10 ; 32) = 320 cycles
    JNE RNDL3 ; (10 ; 32) - 2 = 318 cycles

; Calculating the cycles for this was a pain! There are many branches that can
; Speed up or slow down execution depending on which walls are rendered.
; Assuming the most calculation-intensive map style is use(one-unit-wide
; hallway), there is a 13/15 chance that a wall will attempt to be drawn.
; Meaning 87% of the loops will be 4020 to 4058 cycles long and 13% of the loops
; will be 440 to 528 cycles long. Meaning RNDL1 on average takes
; (4020 ; .87 + 440 ; .13) = 3555 to (4058 ; .87 + 440 ; .13) = 3588 cycles per
; loop. taking that RNDL1 loops around 15 times, RNDL1 takes, on average,
; (53325 + 166) = 53491 to (53820 + 166) = 53986 cycles. That's a lot of cycles!

; A1 will point to the wall table
    LI A1, WALTBL ; 12 cycles

RNDL1
; First, check to make sure we're not at the end of the wall table
    CLR RX ; 10 cycles
    CLR RY ; 10 cycles
    CLR A2 ; 10 cycles
    MOVB *A1+, RY ; 20 cycles
    MOVB *A1+, RX ; 20 cycles
    A RX, A2 ; 14 cycles
    SWPB A2 ; 10 cycles
    A RY, A2 ; 14 cycles
    CI A2, 0 ; 14 cycles
    JEQ RNDEND ; 8 to (10 + 14) cycles, branch from here

    MOV PA, A2 ; 14 cycles
; If swap(bit 15 of PA) is true, swap +x and +y
    ANDI A2, >01 ; 14 cycles
    JNE RNDB2 ; 8 or (10 + 64) cycles, branch from here
RNDB2R
    MOV PA, A2 ; 14 cycles
; If neg(bit 14 of PA) is true, make the ray's advances negative
    ANDI A2, >02 ; 14 cycles
    JEQ RNDB3 ; 8 to 10 cycles, branch from here
    NEG RX ; 12 cycles
    NEG RY ; 12 cycles
RNDB3
; I hate this code with every fiber in my being
; Can't SWPB while keeping the sign bit intact...
    SWPB PX ; 10 cycles
    SWPB PY ; 10 cycles
    A PX, RX ; 14 cycles
    A PY, RY ; 14 cycles
    SWPB RX ; 10 cycles
    SWPB RY ; 10 cycles
    SWPB PX ; 10 cycles
    SWPB PY ; 10 cycles

; Next multiply the Y coordinate by 16 to make it a usable address, as 1 Y unit
; is equal to 16 bytes in memory
    SLA RY, 4 ; 20 cycles
; And add the X, Y and MAP registers to see if the address contains the wall
; we're looking for
    A RX, RY ; 14 cycles
    A MAP, RY ; 14 cycles
; A2 is used to contain the wall color
    CLR A2 ; 10 cycles
    MOVB *RY, A2 ; 18 cycles
; If the value pointed to by RY isn't 0, we draw the wall!
    JNE RNDB1 ; 8 or (10 + 3642) cycles, branch from here
; Otherwise, look for another wall to draw...
    CLR A2 ; 10 cycles
    MOVB *A1+, A2 ; 20 cycles
    SWPB A2 ; 10 cycles
    A A2, A1 ; 14 cycles
    JMP RNDL1 ; 10 cycles, end of tally

RNDEND
    RT ; 14 cycles

; Now time to draw the wall
; There is a 32/148 chance that a vertical line will be drawn per loop of RNDBL1
; Meaning 22% of the loops in RNDBL1 will be 1102 cycles long, and 78% of the
; loops will be 150 cycles long(on a rough average). Now, since RNDBL1 loops
; on average ~10 times(each wall is made up of on average ~10 vertical lines),
; RNDBL1 is roughly (1102 ; .22 + 150 ; .78) ; 10 - 2 = 3592 cycles long!
; minus two for the not taken JNE, and added up with the rest of the code in
; RNDB1, RNDB1 is, on a rough average, 3642 cycles long
RNDB1
; A3 is used to keep track of how many vertical lines need to be drawn
    CLR A3 ; 10 cycles
    MOVB *A1+, A3 ; 20 cycles
    SWPB A3 ; 10 cycles

RNDBL1
; A6 holds the address to the center of the screenbuffer
    LI A6, SCRNBH ; 12 cycles
; A7 holds the horizontal position
    CLR A7 ; 10 cycles
    MOVB *A1+, A7 ; 20 cycles
    SWPB A7 ; 10 cycles
; Check to make sure the vertical line hasn't been drawn
    LI A5, DRAWNL ; 12 cycles
    A A7, A5 ; 14 cycles
    MOVB *A5, A4 ; 18 cycles
    JEQ RNDB4 ; 8 or 10 cycles, branch from here
    CLR A4 ; 10 cycles
    MOVB A4, *A5 ; 18 cycles
; A4 holds the vertical line's height
    MOVB *A1+, A4 ; 20 cycles
    SWPB A4 ; 10 cycles
; A5 holds the vertical starting point for the line
    MOV A4, A5 ; 14 cycles
; Make sure A5 is even, otherwise this won't work
    ANDI A5, >FFFE ; 14 cycles
; Next, multiply A5 by 32 and divide it by 2 (or just shift it left 4 bits)
    SLA A5, 4 ; 20 cycles
; After that, subtract A5 from A6 and add A7!
    S A5, A6 ; 14 cycles
    A A7, A6 ; 14 cycles
; All we need to do is set the wall type to use and then we can draw the line!
; We use A8 for the wall type/color, so as not to modify A2
    CLR A8 ; 10 cycles
    MOVB *A1+, A8 ; 20 cycles
; Swap the wall color if the player angle is odd..
    MOV PA, A5 ; 14 cycles
    ANDI A5, 1 ; 14 cycles
    SLA A5, 3 ; 18 cycles
    SWPB A5 ; 10 cycles
    XOR A5, A8 ; 14 cycles
    A A2, A8 ; 14 cycles

; Loop to draw the vertical line!
; all the cycles from RNDBL2 to RNDB4R are ; the vertical line height, which on
; average is ~ 14. So, to make it simple, the amount of cycles between RNDBL2
; and RNDB4R is on average 728 - 2 cycles (the -2 is for the JNE not taken)
RNDBL2
; Move the wall value into the address pointed to by A6
    MOVB A8, *A6 ; 18 cycles
; Add 32 to A6 (each row on the screen is 32 bytes)
    AI A6, 32 ; 14 cycles
; Decrement the horizontal hight and repeat till A4 is zero!
    DEC A4 ; 10 cycles
    JNE RNDBL2 ; 8 or 10 cycles
RNDB4R
; Subtract 3 from A3 and repeat until A3 is zero! (we have to use add-immediate
; since there's no subtract immediate)
    AI A3, -3 ; 14 cycles
    JNE RNDBL1 ; 8 or 10 cycles
; Go back to the loop!
    JMP RNDL1 ; 10 cycles, end of tally

; 64 cycles
RNDB2
    MOV RX, A2 ; 14 cycles
    MOV RY, RX ; 14 cycles
    MOV A2, RY ; 14 cycles
    NEG RY ; 12 cycles
    JMP RNDB2R ; 10 cycles, branch from here

RNDB4
    INCT A1 ; 10 cycles
    JMP RNDB4R ; 10 cycles, branch from here

    PAGE
;##############################################################################;
; scenes.a99 - code used to render scenes and such                             ;
;==============================================================================;
; This file is a part of VePseu 99!                                             ;
;                                                                              ;
; Copyright (c) 2020, Charles Thompson. All rights reserved.                   ;
;                                                                              ;
; Redistribution and use in source and binary forms, with or without           ;
; modification, are permitted provided that the following conditions are met:   ;
;                                                                              ;
; 1. Redistributions of source code must retain the above copyright notice,    ;
;    this list of conditions and the following disclaimer.                     ;
; 2. Redistributions in binary form must reproduce the above copyright notice, ;
;    this list of conditions and the following disclaimer in the documentation ;
;    and/or other materials provided with the distribution.                    ;
; 3. Neither the name of the copyright holder nor the names of its             ;
;    contributors may be used to endorse or promote products derived from this ;
;    software without specific prior written permission.                        ;
;                                                                              ;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  ;
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    ;
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ;
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    ;
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          ;
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         ;
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     ;
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      ;
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      ;
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   ;
; POSSIBILITY OF SUCH DAMAGE.                                                  ;
;##############################################################################;

    EVEN


SCENES
; Temporarily SWPB PA
    SWPB PA
; All the ram we need is in the 2nd RAM bank...
    .SRB1
; Make sure bit 7 and 8 of STAT1 is set to 0
    CLR A1
    MOVB @STAT1, A1
    ANDI A1, >FC00
    MOVB A1, @STAT1
; A1 will hold the address to the scene
    MOV @CURSCN, A1 ; 22 cycles
; If CURSCN is 0, there are no scenes
    JEQ SCNEND
; A2 will hold the X and Y for the player
    MOV PY, A2 ; 14 cycles
    SLA A2, 4 ; 20 cycles
    A PX, A2 ; 14 cycles
    SWPB A2 ; 10 cycles
; Compare the A/Y/X of the player and the scene. If they aren't equal,
; skip this scene
SCNL1
    CB PA, *A1+
    JNE SCNB6
    CB A2, *A1+ ; 20 cycles
    JNE SCNB1 ; 8 or 10 cycles
; Otherwise, draw the scene!
; First, load the address to the next scene into A3
    MOV *A1+, A3
; Next get the sprite count(A4) and the action count(A5)
    CLR A4 ; 10 cycles
    MOVB *A1+, A4 ; 20 cycles
    SWPB A4 ; 10 cycles
    MOV A4, A5 ; 14 cycles
; Shift A4 left 4 bits and & A5 to split the byte into two nibbles
    SRL A4, 4 ; 20 cycles
; If A4's greater than 0, we branch to SCNB2
    JNE SCNB2
SCNB2R
    ANDI A5, >000F ; 14 cycles
; If A5's greater than 0, we branch to SCNB3
    JNE SCNB3
SCNB3R
; If there's not another scene after this, return!
    CI A3, 0
    JEQ SCNEND
    MOV A3, A1
    JMP SCNL1

SCNB6
    INC A1
SCNB1
    MOV *A1, A1
    JNE SCNL1
SCNEND
    CLR A1
    MOVB @STAT1, A1
    ANDI A1, >0100
    JEQ SCNB4
SCNB4R
    CLR A1
    MOVB @STAT1, A1
    ANDI A1, >0200
    JEQ SCNB5
SCNB5R
    SWPB PA
; Swap back to the 1st RAM bank...
    .SRB0
    RT

; Draw Sprites!
SCNB2
; Set bit 8 of status since sprites are being drawn
    CLR A6
    MOVB @STAT1, A6
    ORI A6, >0100
    MOVB A6, @STAT1

    MOV A4, A6
    CLR A8
; First set the VDC write address (See VDPSWA for comments, this is the same)
; The ORI and SWPB have been done beforehand
; A7 is used as a general-purpose register here
    LI A7, >004C ; 12 cycles
    MOVB A7, @VCOMM ; 22 cycles
    SWPB A7 ; 10 cycles
    MOVB A7, @VCOMM ; 22 cycles
SCNBL1
; Write the sprite's X and Y to the VDP
    MOVB *A1+, @VWRIT ; 20 cycles
    NOP ; 10 cycles
    MOVB *A1+, @VWRIT ; 20 cycles
    SWPB A8
; Write the sprite pattern number to the VDP
    MOVB A8, @VWRIT
    SWPB A8
; Write the color to the VDP
    MOVB *A1+, @VWRIT
    INC A8
    DEC A6
    JNE SCNBL1
; Disable all sprites after this
    LI A7, >D000
    MOVB A7, @VWRIT

; First set the VDC write address (See VDPSWA for comments, this is the same)
; The ORI and SWPB have been done beforehand
; A7 is used as a general-purpose register here
    LI A7, >0050 ; 12 cycles
    MOVB A7, @VCOMM ; 22 cycles
    SWPB A7 ; 10 cycles
    MOVB A7, @VCOMM ; 22 cycles

    MOV A4, A6
SCNBL2
    LI A7, 8
SCNBL3
    MOVB *A1+, @VWRIT
    DEC A7
    JNE SCNBL3
    DEC A6
    JNE SCNBL2
    JMP SCNB2R

; Load an action!
SCNB3
; Set bit 7 of status since there are actions being drawn
    CLR A6
    MOVB @STAT1, A6
    ORI A6, >0200
    MOVB A6, @STAT1
    LI A6, ACTION
    SLA A5, 3
; ACTION is in ram bank 0, and the action we need to copy is in bank 1. While
; doing it another way is not that possible, it still results in less efficient
; code like this...
SCNBL4
    MOVB *A1+, A7
    .SRB0
    MOVB A7, *A6+
    .SRB1
    DEC A5
    JNE SCNBL4

    JMP SCNB3R

SCNB4
; Clear sprite attribute table...
    LI A1, >004C ; 12 cycles
    MOVB A1, @VCOMM ; 22 cycles
    SWPB A1 ; 10 cycles
    MOVB A1, @VCOMM ; 22 cycles
    LI A1, >D000
    MOVB A1, @VWRIT
    JMP SCNB4R

SCNB5
; Actions are in the 1st bank...
    .SRB0
    LI A1, ACTION
    LI A2, >20
    CLR A3
SCNBL5
    MOV A3, *A1+
    DECT A2
    JNE SCNBL5
    .SRB1
    JMP SCNB5R
END .PRINT (>7000-END), ' BYTES LEFT IN ROM'
    AORG >7000
    BANK 1
    EVEN

    DATA MAP1
    DATA MAP1S0
    DATA MAP1MU

WOOF
    LI A1, WOOFTX
    MOV A1, @NOTIFY
    RT

    EVEN
QUACK
    LI A1, QUACKT
    MOV A1, @NOTIFY
    RT

    EVEN
SMILE1
    MOVB @UNLOCK, A1
    JEQ SMILM1
    LI A1, SMILT2
    MOV A1, @NOTIFY
    RT

    EVEN
SMILM1
    LI A1, SMILT1
    MOV A1, @NOTIFY
    RT

DOPEN
    MOVB @UNLOCK, A1
    JEQ DLKD
    LI PX, 2
    LI PY, 12
    RT

DLKD
    LI A1, LKDTXT
    MOV A1, @NOTIFY
    RT

GRAB
    SETO A1
    MOVB A1, @UNLOCK
    LI A1, KEYTXT
    MOV A1, @NOTIFY
    RT

READ1
    LI A1, READ1T
    MOV A1, @NOTIFY
    RT

READ2
    LI A1, READ2T
    MOV A1, @NOTIFY
    RT

READ3
    LI A1, READ3T
    MOV A1, @NOTIFY
    RT

SMEL1
    LI A1, SMEL1T
    MOV A1, @NOTIFY
    RT

SMEL2
    LI A1, SMEL2T
    MOV A1, @NOTIFY
    RT

WOOFTX
    TEXT 'WOOF WOOF!'
    BYTE 0

QUACKT
    TEXT 'QUACK QUACK!'
    BYTE 0

SMILT1
    TEXT 'IVE SEEN A KEY SOMEWHERE...'
    BYTE 0

SMILT2
    TEXT 'YOUVE FOUND THE KEY!'
    BYTE 0

LKDTXT
    TEXT 'THIS DOOR IS LOCKED!'
    BYTE 0

KEYTXT
    TEXT 'KEY AQUIRED!'
    BYTE 0

READ1T
    TEXT 'LOCKED DOOR AHEAD!'
    BYTE 0

READ2T
    TEXT 'WELCOME TO THE FLORAL GARDEN'
    BYTE 0

READ3T
    TEXT 'THANKS FOR PLAYING! PLEASE VISITTHE TOPIC ON ATARIAGE AND GIVE  FEEDBACK!'
    BYTE 0

SMEL1T
    TEXT 'THE FLOWER SMELLS LOVELY!'
    BYTE 0

SMEL2T
    TEXT 'GET AWAY FROM ME'
    BYTE 0

B1END .PRINT (>8000-B1END), "BYTES LEFT IN BANK 1!"
    EVEN
MAP1S0

    BYTE 1, 43, MAP1S1/256, MAP1S1, -128, 68, 114, 15, 83, 114, 15, 96, 114, 15, 110, 114
    BYTE 15, 68, 126, 15, 83, 126, 15, 110, 126, 15, 96, 126, 15, 7, 31, 63
    BYTE 127, 127, -61, -61, -61, 67, 127, -1, -1, -1, -1, -1, -1, 127, 67, -37
    BYTE -37, -37, -37, -37, -37, 91, 91, -37, -37, -37, -61, -1, -1, -32, -8, -4
    BYTE -2, -2, -61, -61, -61, -61, -1, -1, -1, -1, -15, -3, -1, -37, -37, -37
    BYTE -37, -37, -61, -1, -1, -1, -61, -37, -37, -37, -37, -37, -37
    EVEN
MAP1S1

    BYTE 1, 27, MAP1S2/256, MAP1S2, 64, 68, -16, 15, 82, -16, 15, 96, -16, 15, 110, -16
    BYTE 15, 7, 31, 63, 127, 127, -61, -61, -61, 67, 127, -1, -1, -1, -1, -1
    BYTE -1, 127, 67, -37, -37, -37, -37, -37, -37, 91, 91, -37, -37, -37, -61, -1
    BYTE -1
    EVEN
MAP1S2

    BYTE 1, 59, MAP1S3/256, MAP1S3, 64, 68, 0, 15, 82, 0, 15, 96, 0, 15, 110, 0
    BYTE 15, -32, -8, -4, -2, -2, -61, -61, -61, -61, -1, -1, -1, -1, -15, -3
    BYTE -1, -1, -61, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -61, -1
    BYTE -1
    EVEN
MAP1S3

    BYTE 0, 28, MAP1S4/256, MAP1S4, -128, 64, 32, 15, 80, 32, 15, 96, 32, 15, 112, 32
    BYTE 15, 66, 46, 15, 81, 46, 15, 95, 46, 15, 111, 46, 15, 7, 31, 63
    BYTE 127, 127, -61, -61, -61, 67, 127, -1, -1, -1, -1, -1, -1, 127, 67, -37
    BYTE -37, -37, -37, -37, -37, 91, 91, -37, -37, -37, -61, -1, -1, -32, -8, -4
    BYTE -2, -2, -61, -61, -61, -61, -1, -1, -1, -1, -15, -3, -1, -1, -61, -37
    BYTE -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -61, -1, -1
    EVEN
MAP1S4

    BYTE 2, 60, MAP1S5/256, MAP1S5, -128, 64, -48, 15, 80, -48, 15, 96, -48, 15, 112, -48
    BYTE 15, 66, -62, 15, 81, -62, 15, 96, -62, 15, 110, -62, 15, -32, -8, -4
    BYTE -2, -2, -61, -61, -61, -61, -1, -1, -1, -1, -15, -3, -1, -1, -61, -37
    BYTE -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -61, -1, -1, 7, 31, 63
    BYTE 127, 127, -61, -61, -61, 67, 127, -1, -1, -1, -1, -1, -1, 127, 67, -37
    BYTE -37, -37, -37, -37, -37, 91, 91, -37, -37, -37, -61, -1, -1
    EVEN
MAP1S5

    BYTE 1, 44, MAP1S6/256, MAP1S6, -127, 64, 112, 15, 80, 112, 15, 96, 112, 15, 112, 112
    BYTE 15, 64, -128, 15, 80, -128, 15, 96, -128, 15, 112, -128, 15, 7, 31, 63
    BYTE 127, 127, -61, -61, -61, 67, 127, -1, -1, -1, -1, -1, -1, 127, 67, -37
    BYTE -37, -37, -37, -37, -37, 91, 91, -37, -37, -37, -61, -1, -1, -32, -8, -4
    BYTE -2, -2, -61, -61, -61, -61, -1, -1, -1, -1, -15, -3, -1, -1, -61, -37
    BYTE -37, -37, -37, -37, -37, -37, -37, -37, -37, -37, -61, -1, -1
    TEXT '1:OPEN'

    BYTE DOPEN/256, DOPEN
    EVEN
MAP1S6

    BYTE 1, 38, MAP1S7/256, MAP1S7, 65, -88, 112, 10, -88, -128, 10, -104, 112, 10, -104, -128
    BYTE 10, -1, 1, 1, 1, 1, 1, 1, 1, -1, -128, -128, -128, -128, -128, -128
    BYTE -128, -1, -37, -54, -1, -1, -39, -21, -1, -1, 39, -13, -1, -1, 51, -105
    BYTE -1
    TEXT '1:READ'

    BYTE READ1/256, READ1
    EVEN
MAP1S7

    BYTE 1, 101, MAP1S8/256, MAP1S8, 17, -112, 120, 8, -52, 48, 80, 112, 17, 30, 18, 51
    TEXT '1:TALK'

    BYTE WOOF/256, WOOF
    EVEN
MAP1S8

    BYTE 3, 100, MAP1S9/256, MAP1S9, 17, -112, 119, 10, 60, 126, -37, -1, -67, -61, 126, 60
    TEXT '1:TALK'

    BYTE SMILE1/256, SMILE1
    EVEN
MAP1S9

    BYTE 1, -123, MAP1S10/256, MAP1S10, 49, -112, 120, 8, -112, 120, 1, -112, 120, 10, 0, 0
    BYTE 0, -128, 0, 0, 40, 108, 0, 0, 80, 0, 0, 0, 0, 0, 0, 120
    BYTE 40, 124, 124, 124, 0, 0
    TEXT '1:TALK'

    BYTE QUACK/256, QUACK
    EVEN
MAP1S10

    BYTE 3, -124, MAP1S11/256, MAP1S11, 17, -112, 120, 10, 0, 0, 64, -68, 72, 0, 0, 0
    TEXT '1:GRAB'

    BYTE GRAB/256, GRAB
    EVEN
MAP1S11

    BYTE 1, -62, MAP1S12/256, MAP1S12, 65, -104, 112, 10, -104, -128, 10, -88, 112, 10, -88, -128
    BYTE 10, -1, -37, -54, -1, -1, -39, -21, -1, -1, 39, -13, -1, -1, 51, -105
    BYTE -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -128, -128, -128, -128, -128, -128
    BYTE -128
    TEXT '1:READ'

    BYTE READ2/256, READ2
    EVEN
MAP1S12

    BYTE 2, -61, MAP1S13/256, MAP1S13, 49, -112, 120, 2, -112, 120, 8, -112, 120, 6, 0, 0
    BYTE 0, 0, 8, 24, 12, 8, 0, 28, 34, 28, 0, 0, 0, 0, 0, 0
    BYTE 28, 0, 0, 0, 0, 0
    TEXT '1:SMEL'

    BYTE SMEL1/256, SMEL1
    EVEN
MAP1S13

    BYTE 0, -60, MAP1S14/256, MAP1S14, 49, -112, 120, 2, -112, 120, 10, -112, 120, 1, 0, 0
    BYTE 0, 0, 8, 24, 12, 8, 28, 54, 54, 28, 0, 0, 0, 0, 0, 8
    BYTE 8, 0, 0, 0, 0, 0
    TEXT '1:SMEL'

    BYTE SMEL1/256, SMEL1
    EVEN
MAP1S14

    BYTE 2, -59, MAP1S15/256, MAP1S15, 33, -112, 120, 2, -112, 120, 5, 0, 0, 0, 0, 8
    BYTE 24, 12, 8, 0, 20, 62, 28, 0, 0, 0, 0
    TEXT '1:SMEL'

    BYTE SMEL1/256, SMEL1
    EVEN
MAP1S15

    BYTE 0, -58, MAP1S16/256, MAP1S16, 113, -112, -128, 13, -112, 112, 13, -108, 122, 1, -96, 112
    BYTE 10, -96, 112, 15, -96, -128, 15, -96, -128, 10, 0, 0, -32, -4, -34, -1
    BYTE 0, -32, 0, 0, 1, 7, 14, 15, 14, 15, 0, 0, 36, 0, 60, 0
    BYTE 0, 0, 0, 0, 0, 15, 15, 28, 0, 0, 15, 15, 15, 0, 0, 0
    BYTE 0, 0, -32, -32, -32, 0, 0, 0, 0, 0, 0, 0, 0, -32, -32, 112
    BYTE 0, 0
    TEXT '1:SMEL'

    BYTE SMEL2/256, SMEL2
    EVEN
MAP1S16

    BYTE 1, -56, NULL/256, NULL, 65, -90, 113, 10, -106, 113, 10, -106, -127, 10, -90, -127
    BYTE 10, -1, 1, 1, 1, 1, 1, 1, 1, -1, -37, -54, -1, -1, -39, -21
    BYTE -1, -1, 39, -13, -1, -1, 51, -105, -1, -1, -128, -128, -128, -128, -128, -128
    BYTE -128
    TEXT '1:READ'

    BYTE READ3/256, READ3
    EVEN
MAP1MU

    BYTE 2, -1, 32, -99, 0, -65, 2, -1, 35, -100, 0, -65, 2, -1, 39, -101
    BYTE 0, -65, 2, -1, 44, -102, 0, -65, 2, -1, 39, -101, 0, -65, 2, -1
    BYTE 35, -100, 0, -65, 2, -1, 32, -99, 0, -65, 2, -1, 35, -100, 0, -65
    BYTE 2, -1, 39, -101, 0, -65, 2, -1, 44, -102, 0, -65, 2, -1, 39, -101
    BYTE 0, -65, 2, -1, 35, -100, 0, -65, 2, -1, 32, -99, 0, -65, 2, -1
    BYTE 35, -100, 0, -65, 2, -1, 39, -101, 0, -65, 2, -1, 44, -102, 0, -65
    BYTE 2, -1, 39, -101, 0, -65, 2, -1, 35, -100, 0, -65, 2, -1, 32, -99
    BYTE 0, -65, 2, -1, 35, -100, 0, -65, 2, -1, 39, -101, 0, -65, 2, -1
    BYTE 44, -102, 0, -65, 2, -1, 39, -101, 0, -65, 2, -1, 35, -100, 0, -65
    BYTE 1, -7, 32, -99, 0, -65, 1, -1, 32, -99, 0, -65, 2, -1, 35, -100
    BYTE 0, -65, 2, -1, 39, -101, 0, -65, 1, -3, 44, -102, 0, -65, 1, -1
    BYTE 44, -102, 0, -65, 1, -3, 39, -101, 0, -65, 1, -1, 39, -101, 0, -65
    BYTE 1, -7, 35, -100, 0, -65, 1, -1, 35, -100, 0, -65, 1, -3, 32, -99
    BYTE 0, -65, 1, -1, 32, -99, 0, -65, 2, -1, 35, -100, 0, -65, 2, -1
    BYTE 39, -101, 0, -65, 2, -1, 44, -102, 0, -65, 2, -1, 39, -101, 0, -65
    BYTE 2, -1, 35, -100, 0, -65, 2, -1, 32, -99, 0, -65, 2, -1, 35, -100
    BYTE 0, -65, 2, -1, 39, -101, 0, -65, 2, -1, 44, -102, 0, -65, 2, -1
    BYTE 39, -101, 0, -65, 2, -1, 35, -100, 0, -65, 2, -1, 32, -99, 0, -65
    BYTE 2, -1, 35, -100, 0, -65, 2, -1, 39, -101, 0, -65, 2, -1, 44, -102
    BYTE 0, -65, 2, -1, 39, -101, 0, -65, 2, -1, 35, -100, 0, -65, 1, -7
    BYTE 3, -97, 0, -65, 1, -1, 3, -97, 0, -65, 2, -1, 35, -100, 0, -65
    BYTE 2, -1, 39, -101, 0, -65, 1, -3, 44, -102, 0, -65, 1, -1, 44, -102
    BYTE 0, -65, 1, -3, 39, -101, 0, -65, 1, -1, 39, -101, 0, -65, 1, -7
    BYTE 35, -100, 0, -65, 1, -1, 35, -100, 0, -65, 1, -3, 32, -99, 0, -65
    BYTE 1, -1, 32, -99, 0, -65, 2, -1, 35, -100, 0, -65, 2, -1, 39, -101
    BYTE 0, -65, 2, -1, 44, -102, 0, -65, 2, -1, 39, -101, 0, -65, 2, -1
    BYTE 35, -100, 0, -65, 2, -1, 32, -99, 0, -65, 2, -1, 35, -100, 0, -65
    BYTE 2, -1, 39, -101, 0, -65, 2, -1, 44, -102, 0, -65, 2, -1, 39, -101
    BYTE 0, -65, 2, -1, 35, -100, 0, -65, 2, -1, 32, -99, 0, -65, 2, -1
    BYTE 35, -100, 0, -65, 2, -1, 39, -101, 0, -65, 2, -1, 44, -102, 0, -65
    BYTE 2, -1, 39, -101, 0, -65, 2, -1, 35, -100, 0, -65, 1, -7, 32, -99
    BYTE 5, -73, 1, -1, 32, -99, 5, -73, 2, -1, 35, -100, 5, -73, 2, -1
    BYTE 39, -101, 5, -73, 1, -3, 44, -102, 5, -73, 1, -1, 44, -102, 5, -73
    BYTE 1, -3, 39, -101, 5, -73, 1, -1, 39, -101, 5, -73, 1, -7, 35, -100
    BYTE 5, -73, 1, -1, 35, -100, 5, -73, 1, -3, 32, -99, 5, -73, 1, -1
    BYTE 32, -99, 5, -73, 2, -1, 35, -100, 5, -73, 2, -1, 39, -101, 5, -73
    BYTE 2, -1, 44, -102, 5, -73, 2, -1, 39, -101, 5, -73, 2, -1, 35, -100
    BYTE 5, -73, 2, -1, 32, -99, 7, -75, 2, -1, 35, -100, 7, -75, 2, -1
    BYTE 39, -101, 7, -75, 2, -1, 44, -102, 7, -75, 2, -1, 39, -101, 7, -75
    BYTE 2, -1, 35, -100, 7, -75, 2, -1, 32, -99, 7, -75, 2, -1, 35, -100
    BYTE 7, -75, 2, -1, 39, -101, 7, -75, 2, -1, 44, -102, 7, -75, 2, -1
    BYTE 39, -101, 7, -75, 2, -1, 35, -100, 7, -75, 1, -7, 3, -97, 8, -77
    BYTE 1, -1, 3, -97, 3, -65, 2, -1, 35, -100, 3, -65, 2, -1, 39, -101
    BYTE 3, -65, 1, -3, 44, -102, 3, -65, 1, -1, 44, -102, 3, -65, 1, -3
    BYTE 39, -101, 3, -65, 1, -1, 39, -101, 3, -65, 1, -7, 35, -100, 3, -65
    BYTE 1, -1, 35, -100, 3, -65, 1, -3, 32, -99, 3, -65, 1, -1, 32, -99
    BYTE 3, -65, 2, -1, 35, -100, 3, -65, 2, -1, 39, -101, 3, -65, 2, -1
    BYTE 44, -102, 3, -65, 2, -1, 39, -101, 3, -65, 2, -1, 35, -100, 3, -65
    BYTE 2, -1, 32, -99, 3, -65, 2, -1, 35, -100, 3, -65, 2, -1, 39, -101
    BYTE 3, -65, 2, -1, 44, -102, 3, -65, 2, -1, 39, -101, 3, -65, 2, -1
    BYTE 35, -100, 3, -65, 2, -1, 32, -99, 3, -65, 2, -1, 35, -100, 3, -65
    BYTE 2, -1, 39, -101, 3, -65, 2, -1, 44, -102, 3, -65, 2, -1, 39, -101
    BYTE 3, -65, 2, -1, 35, -100, 3, -65, 0
    EVEN
MAP1

    BYTE 1, 2, 1, 0, 0, -128, -128, -128, -128, -128, -128, -128, -128, -110, -78, -78
    BYTE -78, 0, 0, -128, -128, -128, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0
    BYTE -78, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    BYTE -77, 0, 0, -128, -128, -128, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0
    BYTE -78, 0, 0, 0, 0, 0, -92, 0, 0, -92, -128, -128, -128, -110, -78, -78
    BYTE -78, 0, 0, 0, 0, -92, -92, 0, 0, -92, -92, 0, 0, 0, 0, 0
    BYTE 0, 0, 0, 0, 0, -92, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0
    BYTE 0, 0, 0, 0, 0, -92, -92, 0, 0, -92, -92, 0, 0, 0, 0, 0
    BYTE 0, 0, 0, 0, 0, -92, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0
    BYTE 0, 0, 0, 0, 0, -92, -92, -92, -92, -92, -92, 0, 0, 0, 0, 0
    BYTE 0, 0, 0, 0, 0, 0, -76, 0, -78, 0, 0, 0, 0, 0, 0, 0
    BYTE 0, 0, 0, -76, -76, -73, 0, -74, 0, -75, -75, -59, -59, -59, 0, 0
    BYTE 0, 0, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, 0, 0
    BYTE 0, 0, 0, -76, -76, -75, -78, 0, -74, 0, -75, -59, -59, -59, 0, 0
    BYTE 0, 0, 0, 0, 0, 0, 0, -76, 0, -75, 0, 0, 0, 0, 0, 0
    BYTE 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    BYTE 0, 0, 0
;4f6BlqG6wTHs8+j5rLOouQAkJH4kfiQkABA4UDgUOBAAABAQfBAQAAAAAAA4AAAAABwiWlZcIB4AEFQ4fDhUEAAAYmQIECZGADBISDBKRDo=