;##############################################################################;
; ldbank.a99 - loads a ROM BANK into the second RAM bank!                      ;
;==============================================================================;
; This file is a part of VePseu 99!                                            ;
;                                                                              ;
; Copyright (c) 2020, Charles Thompson. All rights reserved.                   ;
;                                                                              ;
; Redistribution and use in source and binary forms, with or without           ;
; modification, are permitted provided that the following conditions are met:  ;
;                                                                              ;
; 1. Redistributions of source code must retain the above copyright notice,    ;
;    this list of conditions and the following disclaimer.                     ;
; 2. Redistributions in binary form must reproduce the above copyright notice, ;
;    this list of conditions and the following disclaimer in the documentation ;
;    and/or other materials provided with the distribution.                    ;
; 3. Neither the name of the copyright holder nor the names of its             ;
;    contributors may be used to endorse or promote products derived from this ;
;    software without specific prior written permission.                       ;
;                                                                              ;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  ;
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    ;
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ;
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    ;
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          ;
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         ;
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     ;
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      ;
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      ;
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   ;
; POSSIBILITY OF SUCH DAMAGE.                                                  ;
;##############################################################################;

; Theoretically, if we don't use any branch functions we can just load this
; into scratchpad ram and it'll work perfectly...
; LDBRAW is 32 bytes in size and is not called directly, it is instead stored in
; scratchpad ram
; A5 = bank to switch to
; 102,494 cycles in total
LDBRAW
; Switch to the disired ROM bank
; 38 cycles in total
; All banks are on even addresses, multiply by 2...
    SLA A5, 1 ; 14 cycles
; ROM banks start at >6000
    AI A5, >6000 ; 14 cycles
; Write to that address through a clr
    CLR *A5 ; 10 cycles
; Initialize the loop
; 36 cycles in total
; Set A5 to point to the start of rom, A6 to point to the start of RAM, and A7
; to hold the size of ROM/RAM in bytes(>1000 = 4kb)
    LI A5, >6000 ; 12 cycles
    LI A6, >7000 ; 12 cycles
    LI A7, >1000 ; 12 cycles
; Now we simply copy everything over to ram!
; 4096/2(>1000/2) loops, 102,398 cycles in total
LDBL1
    MOV *A5+, *A6+ ; 30 cycles
    DECT A7 ; 10 cycles
    JNE LDBL1 ; 10 cycles, -2 at the end of a loop
; Change back to bank 0, and we're done!
; 22 cycles in total
    CLR @>6000 ; 10 cycles
    RT ; 12 cycles
