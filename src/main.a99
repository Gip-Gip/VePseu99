;##############################################################################;
; main.a99 - code that initializes the ti and establishes a game loop          ;
;==============================================================================;
; This file is a part of VePseu 99!                                             ;
;                                                                              ;
; Copyright (c) 2020, Charles Thompson. All rights reserved.                   ;
;                                                                              ;
; Redistribution and use in source and binary forms, with or without           ;
; modification, are permitted provided that the following conditions are met:   ;
;                                                                              ;
; 1. Redistributions of source code must retain the above copyright notice,    ;
;    this list of conditions and the following disclaimer.                     ;
; 2. Redistributions in binary form must reproduce the above copyright notice, ;
;    this list of conditions and the following disclaimer in the documentation ;
;    and/or other materials provided with the distribution.                    ;
; 3. Neither the name of the copyright holder nor the names of its             ;
;    contributors may be used to endorse or promote products derived from this ;
;    software without specific prior written permission.                        ;
;                                                                              ;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  ;
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    ;
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ;
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    ;
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          ;
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         ;
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     ;
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      ;
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      ;
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   ;
; POSSIBILITY OF SUCH DAMAGE.                                                  ;
;##############################################################################;

    EVEN


VREAD EQU >8800
VSTAT EQU >8802
VWRIT EQU >8C00
VCOMM EQU >8C02
VDPCHA EQU >0000
VDPSCA EQU >0800
VDPCTA EQU >0B00
SHGHT EQU 24
SWDTH EQU 32
NULL EQU 0

WSREGS EQU >8300
LDBANK EQU >8320
; Basic screen notification pointer
NOTIFY EQU >8340
MUSI EQU >8342
MUSD EQU >8344
KEYS EQU >8345
KEYR1 EQU >8345
KEYR2 EQU >8346
KEYR3 EQU >8347
KEYR4 EQU >8348
KEYR5 EQU >8349
KEYR6 EQU >834A
KEYR7 EQU >834B
KEYR8 EQU >834C
; Demo-specific variables
UNLOCK EQU >8350

A1 EQU 0 ; Accumulator register 1
A2 EQU 1 ; Accumulator register 2
A3 EQU 2 ; Accumulator register 3
A4 EQU 3 ; Accumulator register 4
A5 EQU 4 ; Accumulator register 5
A6 EQU 5 ; Accumulator register 6
A7 EQU 6 ; Accumulator register 7
A8 EQU 7 ; Accumulator register 8
MAP EQU 8 ; Map pointer register
RX EQU 9 ; Ray X register
RY EQU 10 ; Ray Y register
RTADDR EQU 11 ; Return address register
CRU EQU 12 ; CRU address register
PX EQU 13 ; Player X register
PY EQU 14 ; Player Y register
PA EQU 15 ; Player angle register

    AORG >6000
    BANK 0

CRTHED
    BYTE >AA    ; Standard header n stuff
    BYTE >01    ; Program version (I think?)
    BYTE >00    ; Number of programs on the cart
    BYTE 'R'    ; This tells FinalGROM to use RAM mode(4k ROM, 4k RAM)
    DATA >0000  ; Pointer to the powerup list (n/a)
    DATA MENU   ; Pointer to the program list
    DATA >0000  ; Pointer to the DSLR list (n/a)
    DATA >0000  ; Pointer to the subroutine list (n/a)

MENU
ITEM1
    DATA >0000  ; Pointer to the second menu item (n/a)
    DATA INIT   ; Pointer to the main label
    BYTE 9     ; Length of the text
    TEXT 'VEPSEU 99' ; Text
    EVEN

; VDCCMD: Send a command to the VDC
; A5 = complete 2-byte command
; 66 cycles in total
VDCCMD
    MOVB A5, @VCOMM ; 22 cycles
    SWPB A5 ; 10 cycles
    MOVB A5, @VCOMM ; 22 cycles
    RT ; 12 cycles

; VDCSRG: Set the value of a VDC register
; A5 = register number, A6 = register value
; 120 cycles in total
VDCSRG
    SWPB A6 ; 10 cycles
    SOC A6, A5 ; 14 cycles
    ORI A5, >80 ; 14 cycles
    JMP VDCCMD ; 16 cycles + 66 cycles

; VDCSWA: Set the write address pointer of the VDC
; A5 = address
; 120 cycles in total
VDCSWA
    ANDI A5, >7FFF ; 14 cycles
    ORI A5, >4000 ; 14 cycles
    SWPB A5 ; 10 cycles
    JMP VDCCMD ; 16 cycles + 66 cycles

; VDCSRA: Set the read address pointer of the VDC
; A5 = address
; 90 cycles in total
VDCSRA
    ANDI A5, >7FFF ; 14 cycles
    SWPB A5 ; 10 cycles
    JMP VDCCMD ; 16 cycles + 66 cycles

; INIT takes an estimated 12394 cycles in total!
INIT
; Make sure interrupts are off
; 16 cycles
    LIMI 0 ; 16 cycles
; Make sure the workspace registers are in the right place
; 10 cycles
    LWPI WSREGS ; 10 cycles

; Move the old characters to the new character space. Default location is >0800
; First, initialize the read loop
; 146 cycles
    LI A5, >0800 ; 12 cycles
    BL @VDCSRA ; (20 + 90) cycles

    LI A1, INTTMP ; 12 cycles
; We only care about the first 128 characters. Therefore the first (128*8) bytes
    LI A2, >0400 ; 12 cycles
; Move all the old characters from the VDP into cartridge RAM
; 1024(>400) loops, 49,150 cycles
INITL1
    MOVB @VREAD, *A1+ ; 28 cycles
    DEC A2 ; 10 cycles
    JNE INITL1 ; 10 cycles, - 2 on the final loop

; Initialize the write loop
    LI A5, >0000 ; 12 cycles
    BL @VDCSWA ; 20 + 120 cycles

    LI A1, INTTMP ; 12 cycles
    LI A2, >0400 ; 12 cycles
; Move all the old characters from cartridge RAM to the VDP
; 1024(>400) loops, 49,150 cycles
INITL2
    MOVB *A1+, @VWRIT ; 28 cycles
    DEC A2 ; 10 cycles
    JNE INITL2 ; 10 cycles, -2 on the final loop

; Set the 0th register to all 0s
; 160 cycles
    CLR A5 ; 10 cycles
    CLR A6 ; 10 cycles
    BL @VDCSRG ; 20 cycles + 120 cycles

; Enable the 1st and 2nd bit on the first register
; (enable the screen and vdp interrupts)
; 164 cycles
    LI A5, >01 ; 12 cycles
    LI A6, >E1 ; 12 cycles
    BL @VDCSRG ; 20 cycles + 120 cycles

; Set the video buffer to the address 2*>400, aka >800
; 164 cycles
    LI A5, >02 ; 12 cycles
    LI A6, >02 ; 12 cycles
    BL @VDCSRG ; 20 cycles + 120 cycles

; Set the character pattern address to 0
; 162 cycles
    LI A5, >04 ; 12 cycles
    CLR A6 ; 10 cycles
    BL @VDCSRG ; 20 cycles + 120 cycles

; Set the sprite attributes table to >18*>80, aka >0C00
; 164 cycles
    LI A5, >05 ; 12 cycles
    LI A6, >18 ; 12 cycles
    BL @VDCSRG ; 20 cycles + 120 cycles

; Set the sprite pattern address to 2*>800, aka 1000
; 164 cycles
    LI A5, >06 ; 12 cycles
    LI A6, >02 ; 12 cycles
    BL @VDCSRG ; 20 cycles + 120 cycles

; Set the background color to black
; 164 cycles
    LI A5, >07 ; 12 cycles
    LI A6, >11 ; 12 cycles
    BL @VDCSRG ; 20 cycles + 120 cycles

; Place the color table behind the screen at address >2C*>40, aka >0B00
; 164 cycles
    LI A5, >03 ; 12 cycles
    LI A6, >2C ; 12 cycles
    BL @VDCSRG ; 20 cycles + 120 cycles

; Load ldbank into scratchpad ram...
; 36 cycles
; Set A1 to point to LDBRAW
    LI A1, LDBRAW ; 12 cycles
; Set A2 to point ot LDBANK
    LI A2, LDBANK ; 12 cycles
; Set A3 to hold the size of LDBANK in words(ldbank is 16 words long)
    LI A3, 16 ; 12 cycles
; Loop until all the words are loaded into memory
; 16 loops, 798 cycles in total
LDBRL1
    MOV *A1+, *A2+ ; 30 cycles
    DEC A3 ; 10 cycles
    JNE LDBRL1 ; 10 cycles, -2 cycles on final loop

; Load the color pallet onto the VDP
; 1682 cycles in total
    BL @LDCLR ; 20 + 1662 cycles

; Load the texture table onto the VDP
; 50,090 cycles in total
    LI A5, TEXTBL ; 12 cycles
    BL @LDTEX ; 20 + 50,058 cycles

; Load the first map
; 123,338 cycles in total
    LI A5, 1 ; 12 cycles
    BL @LDMAP ; 123,326 cycles in total

; Set all the KEYP variables to false
; 120 cycles in total
    CLR A1 ; 10 cycles
    MOVB A1, @KEYP_W ; 22 cycles
    MOVB A1, @KEYP_S ; 22 cycles
    MOVB A1, @KEYP_D ; 22 cycles
    MOVB A1, @KEYP_A ; 22 cycles
    MOVB A1, @KEYP_1 ; 22 cycles

; Set the CRU's decrement timer to 9.5 frames
; 78 cycles in total
    .RESET_DLY ; 78 cycles

LOOP
    BL @KEYBRD
    BL @MUSIC
    BL @RENDER
    BL @SCENES
    BL @ACT
    BL @DRWNOT
    BL @RNDPSH
    BL @FRMDLY ; Waits until 10 frames have passed since the last .RESET_DLY
; Go to the start of the loop
; 8 cycles
    JMP LOOP ; 8 cycles
